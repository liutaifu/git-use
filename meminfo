#分析内存问题
Vss: 虚拟内存。
Rss: 这个是衡量一个进程的内存大小，包括了共享库，再通俗一点就是，一个so库文件,这个算的是物理内存
PSS:比例共享的物理内存。形象一点就是，一个so库文件，A进程占用了，B进程也占用了，会根据一定比例，一部分算给A，一部分算给B。
Uss: 这个叫独立占用的物理内存。没有把共享库计算进去的值

只是为了衡量一个进程占用内存大小的话，可以看Rss或者是Pss。如果是看整机的内存的话，绝对是看Pss，这个就不会对共享的库文件重复计算。
adb shell procrank 里面的值，Pss 的 Total 就是所理解的所有app占用的内存大小

Linux的PSS标准 （Proportional Set Size)——实际物理内存

adb shell dumpsys procstats --hours 3  去输出最后3小时收集的内存信息。这些数据和之前图形界面的数据是相同的。

dd工具介绍
dd if=/dev/zero of=/data/swapfile bs=1024 count=65536
65536+0 records in
65536+0 records out
这样就创建一个有连续空间的交换文件，大小为60M左右，关于dd命令做简单的讲述:
if＝输入文件，或者设备名称。
of＝输出文件或者设备名称。
ibs=bytes 表示一次读入bytes 个字节(即一个块大小为 bytes 个字节)。
obs=bytes 表示一次写bytes 个字节(即一个块大小为 bytes 个字节)。
bs＝bytes，同时设置读写块的大小，以bytes为单位，此参数可代替 ibs 和 obs。
count=blocks 仅拷贝blocks个块。
skip=blocks 表示从输入文件开头跳过 blocks 个块后再开始复制。
seek=blocks表示从输出文件开头跳过 blocks 个块后再开始复制。(通常只有当输出文件是磁盘或磁带时才有效)
这里的输入设备/dev/zero代表一个输出永远为0的设备文件，使用它作输入可以得到全为空的文件。

一、Android六大进程
	1.前台进程(foreground)
	2.可见进程(visible)
	3.次要服务(secondary server)
	4.后台进程(hidden)
	5.内容供应节点(content provider)
	6.空进程(empty)
	
二、oom_adj和oom_score
	Low Memorry Killer的机制主要是通过进程的oom_adj和oom_score来进行内存的处理的
	1. 每一个进程都有一个oom_adj值，取值范围[-17,15]。
 	2. 每一个进程都有一个oom_scroe值，它是根据oom_adj计算出一个值，分数越大越容易被杀死。
 	3. 内存紧张时，LMK基于oom_adj和oom_score值来决定是否要回收一个进程。
 	4. oom_adj值越小，越不容易被杀死，其中，-17时 oom_score为0表示不会被杀死。
 	5. 查看oom_adj和oom_score方法：
	cat proc/pid/oom_adj
	cat proc/pid/oom_score
	
	六大进程分别对应的oom_adj值
	FOREGROUND_APP		0
	VISIBLE_APP			1
	SECONDARY_SERVER	2
	HIDDEN_APP			7
	CONTENT_PROVIDER	14
	EMPTY_APP			15


三、LMK的进程回收策略
		Low Memory Killer Driver在用户空间指定了一组内存临界值及与之一一对应的一组oom_adj值，
		当系统剩余内存位于内存临界值中的一个范围内时，如果一个进程的oom_adj值大于或等于这个
		临界值对应的oom_adj值就会进入被杀掉队列。
		
	如下一个参考数据	
		oom_adj			阈值(页面)
		0				12288
		1				15360
		2				18432
		7				21504
		14				124576
		15				30720
		这里其实算出来的是一个阈值，阈值的意思是当手机内存小于阈值的情况下，内存就会开始逐级回
		收该类型的内存。阈值中数值的单位是内存中的页面数量，一般情况下一个页面是4KB。比如说15
		级别是 30720 * 4K = 123 M，即当手机内存小于123M的时候开始回收15级别的应用的内存，即选择
		一个oom_adj值最大并且消耗内存最多的进程来回收.
		
		8+1
		msm8953_32:/ # ls /sys/module/lowmemorykiller/parameters/minfree
		/sys/module/lowmemorykiller/parameters/minfree
		msm8953_32:/ # cat /sys/module/lowmemorykiller/parameters/minfree
		15360,19200,23040,26880,34415,43737
		16+2
		msm8953_64:/ # cat  /sys/module/lowmemorykiller/parameters/minfree
		14746,18432,22118,25805,40000,55000
		
		[ 7523.122671] lowmemorykiller: Killing 'eaurora.snapcam' (4417), adj 0,
		[ 7523.122671]    to free 37448kB on behalf of 'kswapd0' (161) because
		[ 7523.122671]    cache 60256kB is below limit 61440kB for oom_score_adj 0
		[ 7523.122671]    Free memory is 23076kB above reserved.
		[ 7523.122671]    Free CMA is 210728kB
		[ 7523.122671]    Total reserve is 23200kB
		[ 7523.122671]    Total free pages is 242236kB
		[ 7523.122671]    Total file cache is 64908kB
		[ 7523.122671]    Total zcache is 0kB
		[ 7523.122671]    GFP mask is 0xd0
		
		15360(pages)*4(kb) = 61440kB
		14746(pages)*4(kb) = 58984KB < 60256kB
		
		eaurora.snapcam 进程oom_adj=0,对应的阈值是15360，换算内存61440kB，cache 60256kB 低于阈值，
		触发lowmemorykiller机制。对比16+2的机器，cache limit 比8+1的要低；8+1是32位，16+2是64位。


内存分析命令
	1. free -h
		msm8953_32:/ # free -m
						total        used        free      shared     buffers
		Mem:              855         679         175           1           6
		-/+ buffers/cache:            672         182
		Swap:             511          58         453
		
		APP实际可以使用的内存是 free(175) + buffers(6) = cache free(182)



09-26 15:24:04.771 E/SnapCam_CaptureModule(10117): cancel longshot: free=20574208 cached=198778880 threshold=226492416


CaptureModule.java
212      private static final int LONGSHOT_CANCEL_THRESHOLD = 40 * 1024 * 1024;

4390          if (SECONDARY_SERVER_MEM == 0) {
4391              ActivityManager am = (ActivityManager) mActivity.getSystemService(
4392                      Context.ACTIVITY_SERVICE);
4393              ActivityManager.MemoryInfo memInfo = new ActivityManager.MemoryInfo();
4394              am.getMemoryInfo(memInfo);
4395              SECONDARY_SERVER_MEM = memInfo.secondaryServerThreshold;
4396          }
4398          long totalMemory = Runtime.getRuntime().totalMemory();
4399          long maxMemory = Runtime.getRuntime().maxMemory();
4400          long remainMemory = maxMemory - totalMemory;
4401  
4402          MemInfoReader reader = new MemInfoReader();
4403          reader.readMemInfo();
4404          long[] info = reader.getRawInfo();
4405          long availMem = (info[Debug.MEMINFO_FREE] + info[Debug.MEMINFO_CACHED]) * 1024;
4406  
4407          if (availMem <= SECONDARY_SERVER_MEM || remainMemory <= LONGSHOT_CANCEL_THRESHOLD) {
4408              Log.e(TAG, "cancel longshot: free=" + info[Debug.MEMINFO_FREE] * 1024
4409                      + " cached=" + info[Debug.MEMINFO_CACHED] * 1024
4410                      + " threshold=" + SECONDARY_SERVER_MEM);
4411              RotateTextToast.makeText(mActivity, R.string.msg_cancel_longshot_for_limited_memory,
4412                      Toast.LENGTH_SHORT).show();
4413              return true;
4414          }


Android内存整理
一、RAM（random access memory）随机存取存储器，及内存。

二、一般软件内存分配时会涉及到以下几个区域：
1. 寄存器(Registers)
2. 栈(stack)
3. 堆(heap)
4. 静态域(static field)
5. 常量池(constant pool)
6. 非RAM存储

三、内存优化是从APPS角度入手，避免因不正确使用内存 & 缺乏管理，从而出现 内存泄露（ML）、内存溢出（OOM）、内存空间占用过
大等问题，最终导致应用程序崩溃（Crash）。
1.简介 
	内存管理= 内存分配 + 内存回收/释放 
	内存管理的对象= 进程、对象、变量 
	管理层次= Application frameworks、Dalvik VM、linux 
2.系统分配给每个APPS的内存大小是有限的,不能无线申请 
	内存泄漏 申请分配内存A，B地址不是连续，A，B内存块之间的区域既是内存泄漏，内存已使用完毕，但未即使回收
	内存溢出 只申请分配内存，不释放，导致内存超出APP最大使用内存量，溢出 
	内存抖动 内存使用不足时，短时间内即申请大量内存，又导致GC回收内存机制触发的现象 
四、常见的内存内存问题
1. 内存泄漏
2. 内存溢出
3. 内存抖动
4.图片bitmap
五、APPS内存优化分析工具
1.MAT(Memory Analysis Tools) eclipse 
2.Heap Viewer
3.Allocation Tracker
4.Android Studio (Memory Monitor)
5. LeakCanary https://www.liaohuqiu.net/cn/posts/leak-canary/  推荐使用

应用中添加如下代码，发生内存泄漏时，即会在通知栏看到通知信息。
public class ExampleApplication extends Application {
  @Override public void onCreate() {
    super.onCreate();
    LeakCanary.install(this);
  }
}
