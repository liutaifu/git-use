1、lib.h和dtsi的对应配置
   1.1、lib.h
   .power_setting_a =
      {
        {
          .seq_type = CAMERA_POW_SEQ_GPIO,
          .seq_val = CAMERA_GPIO_STANDBY,
          .config_val = GPIO_OUT_LOW,
          .delay = 1,
        },
      }，
    1.2、dtsi
    cam_vdig-supply = <&pmxx_l2>;
		cam_vana-supply = <&pmxx_l17>;
		cam_vio-supply = <&pmxx_l6>;
		cam_vaf-supply = <&pmxx_l8>;
    
    gpios = <&msm_gpio 26 0>,
  如果seq_type配置CAMERA_POW_SEQ_VREG，则dtsi中cam_vdig配置对应vreg，gpios中配置gpio控制开关。

2、反解析dtb分析dtsi配置
./out/target/product/marino/obj/KERNEL_OBJ/scripts/dtc/dtc -I dtb -O dts 

./out/target/product/marino/obj/KERNEL_OBJ/arch/arm64/boot/dts/mediatek/marino.dtb > ~/f.dts

3、从Android P开始，bootimage 再分bootimage和dtboimage，具体信息还需考证。

4、验证GPIO是否被占用
   GPIO资源，AP端经常需要和ADSP部分竞争，且由于ADSP优先级高于AP，一旦ADSP占用，AP端就无法再次申请。
   4.1、首先判断gpio是否能在AP端操作
        一种：通过调用通用GPIO函数，申请，设置value，打印log是否生效。
	
	
